//! Uniswap V2 Pool Synchronization Implementation
//!
//! This module provides the Uniswap V2-specific implementations for pool synchronization,
//! including the pool structure, factory contract interface, and pool fetcher.

use crate::chain::Chain;
use crate::pools::{Pool, PoolFetcher, PoolType};
use alloy::primitives::{address, Address, Log};
use alloy::primitives::U128;
use alloy::sol_types::{SolEvent};
use alloy::sol;
use async_trait::async_trait;
use serde::{Deserialize, Serialize};

// Uniswap V2 factory contract interface
sol!(
    #[derive(Debug)]
    #[sol(rpc)]
    contract UniswapV2Factory  {
        event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
    }
);


sol!(
    #[derive(Debug)]
    #[sol(rpc, bytecode = "6080604052346100a357610a06803803809161001a826100bb565b6080398060800160208092126100a357608051906001600160401b0382116100a35780609f830112156100a357816080015161005581610124565b926100636040519485610101565b81845260a0602085019260051b8201019283116100a35760a001905b82821061008c5783610398565b8480916100988461013b565b81520191019061007f565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6080601f91909101601f19168101906001600160401b038211908210176100e157604052565b6100a7565b604081019081106001600160401b038211176100e157604052565b601f909101601f19168101906001600160401b038211908210176100e157604052565b6001600160401b0381116100e15760051b60200190565b51906001600160a01b03821682036100a357565b6040519061010082016001600160401b038111838210176100e1576040525f60e083828152826020820152606060408201526060808201528260808201528260a08201528260c08201520152565b906101a782610124565b6101b46040519182610101565b82815280926101c5601f1991610124565b01905f5b8281106101d557505050565b8060606020809385010152016101c9565b80518210156101fa5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b90808251908181526020809101926020808460051b8301019501935f915b8483106102605750505050505090565b909192939495848061027e600193601f198682030187528a5161020e565b9801930193019194939290610250565b9092916040916040810194604082528051809652606095606083019060608160051b850101956020809401925f915b8383106102dd5750505050506102da949550818403910152610232565b90565b909192939785808c6103896001946103478e8d605f19908403018a525193610335610100898060a01b038751168552610323888801518987019060018060a01b03169052565b8a87015190808c87015285019061020e565b9080860151908483039085015261020e565b60808085015160ff16908301529260a08181015160ff169083015260c0818101516001600160701b03169083015260e0908101516001600160701b0316910152565b9a0193019301919392906102bd565b6103c38151916103a783610124565b926103b56040519485610101565b808452601f19928391610124565b015f5b8181106104515750506103d9815161019d565b905f5b8151811015610426578061040a6104056103f8600194866101e6565b516001600160a01b031690565b61068c565b61041483876101e6565b5261041f82886101e6565b52016103dc565b505061044c6104409160405192839160208301968761028e565b03838101835282610101565b510190f35b60209061045c61014f565b828288010152016103c6565b908160209103126100a3576102da9061013b565b6040513d5f823e3d90fd5b51906001600160701b03821682036100a357565b908160609103126100a3576104af81610487565b9160406104be60208401610487565b92015163ffffffff811681036100a35790565b6001600160401b0381116100e157601f01601f191660200190565b6020818303126100a3578051906001600160401b0382116100a3570181601f820112156100a35780519061051f826104d1565b9261052d6040519485610101565b828452602083830101116100a357815f9260208093018386015e8301015290565b60405190602082016001600160401b038111838210176100e1576040525f8252565b6040519061057d826100e6565b60078252662aa725a727aba760c91b6020830152565b908160209103126100a3575160ff811681036100a35790565b5f9060033d116105b857565b905060045f803e5f5160e01c90565b5f60443d106102da57604051600319913d83016004833e81516001600160401b03918282113d6024840111176106235781840194855193841161062b573d8501016020848701011161062357506102da92910160200190610101565b949350505050565b50949350505050565b3d1561065e573d90610645826104d1565b916106536040519384610101565b82523d5f602084013e565b606090565b60405190610670826100e6565b600d82526c2ab735b737bbb71032b93937b960991b6020830152565b61069461014f565b60408051630dfe168160e01b8152919360609390926020916001600160a01b03169060049083818381865afa5f91816109e6575b5061071e57505050505060016106dc6105ac565b6308c379a014610700575b6106ed57565b90506106f7610634565b506102da610663565b6107086105c7565b80610714575b506106e7565b9250505f8061070e565b6001600160a01b0316875293949293919291845163d21220a760e01b81529084828281865afa9182156109b25784905f936109b7575b506001600160a01b0390921688860190815292909182918751630240bc6b60e21b815292839182905afa80156109b2578594899288925f915f91610982575b506001600160701b0390811660e08601521660c0840152825182516395d89b4160e01b80825296909290916001600160a01b03168387815a935f94fa92835f6108979761080f9161080f9861080f9861081b9661080f96610966575b5061095e5790506107fe610570565b90820152516001600160a01b031690565b6001600160a01b031690565b968c8b518a818a8163313ce56760e01b9d8e82525afa5f918161093f575b5061092b5750608061084c910160129052565b82515f906108649061080f906001600160a01b031681565b91888d518094819382525afa5f9181610907575b506108fe5750610886610570565b908c0152516001600160a01b031690565b94518095819382525afa9182915f936108cf575b50506108c25750601260a08301525b6102da61054e565b60ff1660a08301526108ba565b6108ef929350803d106108f7575b6108e78183610101565b810190610593565b905f806108ab565b503d6108dd565b908c01526103f8565b6109249192503d805f833e61091c8183610101565b8101906104ec565b905f610878565b608061093a92019060ff169052565b61084c565b6109579192508c8d3d106108f7576108e78183610101565b905f610839565b8201526103f8565b61097b9193503d805f833e61091c8183610101565b915f6107ef565b90506109a49150823d84116109ab575b61099c8183610101565b81019061049b565b505f610793565b503d610992565b61047c565b8293506109d990873d89116109df575b6109d18183610101565b810190610468565b92610754565b503d6109c7565b6109fe919250853d87116109df576109d18183610101565b905f6106c856fe" )]
    UniswapV2DataSync,
    "src/abis/UniswapV2DataSyncAbi.json"
);

/// Represents a Uniswap V2 Automated Market Maker (AMM) pool
#[derive(Debug, Default, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub struct UniswapV2Pool {
    /// The address of the pool contract
    pub address: Address,
    /// The address of the first token in the pair
    pub token0: Address,
    /// The address of the second token in the pair
    pub token1: Address,
    /// The name of the first token in the pair
    pub token0_name: String,
    /// The name of the second token in the pair
    pub token1_name: String,
    /// The amount of decimals in the first token
    pub token0_decimals: u8,
    /// The amount of decimals in the second token
    pub token1_decimals: u8,
    /// The reserves for the first token
    pub token0_reserves: U128,
    /// the reserves for the second pair
    pub token1_reserves: U128
}

/// Uniswap V2 pool fetcher implementation
pub struct UniswapV2Fetcher;

#[async_trait]
impl PoolFetcher for UniswapV2Fetcher {
    /// Returns the pool type for Uniswap V2
    fn pool_type(&self) -> PoolType {
        PoolType::UniswapV2
    }

    /// Returns the factory address for Uniswap V2 on the given chain
    fn factory_address(&self, chain: Chain) -> Address {
        match chain {
            Chain::Ethereum => address!("5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f"),
            Chain::Base => address!("8909Dc15e40173Ff4699343b6eB8132c65e18eC6"),
        }
    }

    /// Returns the event signature for pair creation in Uniswap V2
    fn pair_created_signature(&self) -> &str {
        UniswapV2Factory::PairCreated::SIGNATURE
    }

    /// Attempts to create a `Pool` instance from a log entry
    async fn from_log(&self, log: &Log) -> Option<Pool> {
        let decoded_log = UniswapV2Factory::PairCreated::decode_log(log, false).unwrap();
        Some(Pool::UniswapV2(UniswapV2Pool {
            address: decoded_log.data.pair,
            ..Default::default()
        }))
    }
}
